import { ScrollView, TabWidget, VerticalBox } from "std-widgets.slint";

struct Icon {
    on: image,
    off: image,
    auto_off: image,
    error: image,
}

struct AllIcons {
    fan: Icon,
    light: Icon,
    night: Icon,
    schedule: Icon,
    select: Icon,
    speaker: Icon,
    trumpet: Icon,
    tv: Icon,
}

struct WidgetData {
    is_button: bool,
    is_title: bool,
    title: string,
    state: string,
    image: image,
    color: color,
    text_color: color,
}

struct TagsData {
    yesterday: [string],
    today: [string],
    tomorrow: [string],
}

component RoboticaButton inherits Rectangle {
    callback clicked;
    in property<image> icon;
    in property<string> title;
    in property<string> state;
    in property<color> text_color;

    height: 80px;
    width: 80px;
    border-radius: 5px;
    animate background { duration: 200ms; }

    Image {
        source: icon;
        x: parent.width/2 - self.width/2;
        y: 4px;
        width: 52px;
        height: 52px;
    }

    Text {
        text: title;
        x: 0px;
        y: parent.height - 20px - 4px;
        width: parent.width;
        // height: parent.height;
        color: text_color;
        font-size: 10px;
        horizontal-alignment: center;
    }

    Text {
        text: state;
        x: 0px;
        y: parent.height - 10px - 4px;
        width: parent.width;
        // height: parent.height;
        color: text_color;
        font-size: 10px;
        horizontal-alignment: center;
    }

    TouchArea {
        clicked => {
            // Delegate to the user of this element
            root.clicked();
        }
    }
}

component Title inherits Rectangle {
    callback clicked;
    in property<string> title;
    in property<color> text_color;

    height: 80px;
    width: 80px;
    border-radius: 5px;
    animate background { duration: 200ms; }

    Text {
        text: title;
        x: 0px;
        y: parent.height/2 - 10px/2;
        width: parent.width;
        // height: parent.height;
        color: text_color;
        font-size: 10px;
        horizontal-alignment: center;
    }
}

component Widget inherits VerticalLayout {
    in property<WidgetData> widget;
    callback clicked;

    if widget.is_button : RoboticaButton {
        icon: widget.image;
        background: widget.color;
        text_color: widget.text_color;
        title: widget.title;
        state: widget.state;
        clicked => {
            root.clicked();
        }
    }

    if widget.is_title : Title {
        background: widget.color;
        text_color: widget.text_color;
        title: widget.title;
    }
}

component Buttons inherits ScrollView {
    in-out property<int> number_per_row;
    in property <[WidgetData]> widgets: [];
    callback screen_reset;
    callback clicked_widget(int);

    viewport-width: number_per_row * 90px + 10px;
    viewport-height: floor(widgets.length / number_per_row) * 90px;

    for widget[i] in widgets : Widget {
        widget: widget;
        x: mod(i, number_per_row) * 90px + 10px;
        y: floor(i / number_per_row) * 90px + 10px;
        clicked => {
            screen_reset();
            root.clicked_widget(i);
        }
    }
}

component InlineTags inherits Rectangle {
    in property <[string]> tags;
    for tag[i] in tags : Rectangle {
        Text {
            text: tag;
            color: white;
            font-size: 10px;
            horizontal-alignment: center;
            vertical-alignment: center;
            x: 10px;
            y: 10px;
            width: parent.width - 20px;
            height: parent.height - 20px;
        }
        background: green;
        width: 200px;
        height: 40px;
        border-radius: 5px;
        x: 10px + mod(i,3) * 220px;
        y: 10px + floor(i/3) * 60px;
    }
    width: 10px + 3 * 220px;
    height: 10px + ceil(tags.length/3) * 60px;
    background: blue;
}

component Tags inherits VerticalLayout {
    in property <TagsData> tags;
    callback screen_reset;
    alignment: start;

    Text {
        text: "Yesterday";
        color: white;
        font-size: 10px;
        horizontal-alignment: center;
    }

    InlineTags {
        tags: tags.yesterday;
        x: parent.width/2 - self.width/2;
    }

    Rectangle {  height: 10px; }

    Text {
        text: "Today";
        color: white;
        font-size: 10px;
        horizontal-alignment: center;
    }

    InlineTags {
        tags: tags.today;
        x: parent.width/2 - self.width/2;
    }

    Rectangle {  height: 10px; }

    Text {
        text: "Tomorrow";
        color: white;
        font-size: 10px;
        horizontal-alignment: center;
    }

    InlineTags {
        tags: tags.tomorrow;
        x: parent.width/2 - self.width/2;
    }
}


component Clock inherits VerticalLayout {
    in property<int> hour;
    in property<int> minute;
    in property<int> second;

    Text {
        text: "Clock";
        color: white;
        horizontal-alignment: center;
        font-size: 20px;
    }
    Rectangle {
        background: black;

        // hour hand
        Path {
            viewbox-height: 100;
            viewbox-width: 100;
            width: parent.width;
            height: parent.height;
            stroke: red;
            stroke-width: 10px;

            MoveTo {
                x: 50;
                y: 50;
            }
            LineTo {
                x: sin(360deg*hour/12)*30 + 50;
                y: -cos(360deg*hour/12)*30 + 50;
            }

        }

        // minute hand
        Path {
            viewbox-height: 100;
            viewbox-width: 100;
            width: parent.width;
            height: parent.height;
            stroke: green;
            stroke-width: 5px;

            MoveTo {
                x: 50;
                y: 50;
            }
            LineTo {
                x: sin(360deg*minute/60)*40 + 50;
                y: -cos(360deg*minute/60)*40 + 50;
            }
        }

        // second hand
        Path {
            viewbox-height: 100;
            viewbox-width: 100;
            width: parent.width;
            height: parent.height;
            stroke: blue;
            stroke-width: 1px;

            MoveTo {
                x: 50;
                y: 50;
            }
            LineTo {
                x: sin(360deg*second/60)*50 + 50;
                y: -cos(360deg*second/60)*50 + 50;
            }
        }

        // clock
        Path {
            viewbox-height: 100;
            viewbox-width: 100;
            width: parent.width;
            height: parent.height;
            stroke: white;
            stroke-width: 10px;

            MoveTo {
                x: 50;
                y: 0;
            }
            ArcTo {
                x: 50;
                y: 100;
                radius-x: 50;
                radius-y: 50;
                x-rotation:0;
                large-arc: true;
                sweep: true;
            }
            ArcTo {
                x: 50;
                y: 0;
                radius-x: 50;
                radius-y: 50;
                x-rotation:0;
                large-arc: true;
                sweep: true;
            }
        }
    }
}

export component AppWindow inherits Window {
    in-out property<int> number_per_row;
    in property<bool> screen_off;
    in property<string> msg_body;
    in property<string> msg_title;
    in property<bool> display_message;
    in property<int> hour;
    in property<int> minute;
    in property<int> second;

    callback clicked_widget(int);
    callback screen_reset;
    background: black;

    out property<AllIcons> all_icons: {
        fan: { on: @image-url("images/fan_on.svg"), off: @image-url("images/fan_off.svg"), auto_off: @image-url("images/fan_auto.svg"), error: @image-url("images/fan_error.svg") },
        light: { on: @image-url("images/light_on.svg"), off: @image-url("images/light_off.svg"), auto_off: @image-url("images/light_auto.svg"), error: @image-url("images/light_error.svg") },
        night: { on: @image-url("images/night_on.svg"), off: @image-url("images/night_off.svg"), auto_off: @image-url("images/night_auto.svg"), error: @image-url("images/night_error.svg") },
        schedule: { on: @image-url("images/schedule_on.svg"), off: @image-url("images/schedule_off.svg"), auto_off: @image-url("images/schedule_auto.svg"), error: @image-url("images/schedule_error.svg") },
        select: { on: @image-url("images/select_on.svg"), off: @image-url("images/select_off.svg"), auto_off: @image-url("images/select_auto.svg"), error: @image-url("images/select_error.svg") },
        speaker: { on: @image-url("images/speaker_on.svg"), off: @image-url("images/speaker_off.svg"), auto_off: @image-url("images/speaker_auto.svg"), error: @image-url("images/speaker_error.svg") },
        trumpet: { on: @image-url("images/trumpet_on.svg"), off: @image-url("images/trumpet_off.svg"), auto_off: @image-url("images/trumpet_auto.svg"), error: @image-url("images/trumpet_error.svg") },
        tv: { on: @image-url("images/tv_on.svg"), off: @image-url("images/tv_off.svg"), auto_off: @image-url("images/tv_auto.svg"), error: @image-url("images/tv_error.svg") },
    };

    in property <[WidgetData]> widgets: [];
    in property <TagsData> tags: {
        yesterday: [],
        today: [],
        tomorrow: [],
    };

    if !screen_off : TouchArea {
        clicked => {
            screen_reset();
        }
    }

    TabWidget {
        x: 0px;
        y: 0px;
        width: parent.width;
        height: parent.height;

        Tab {
            title: "Clock";

            Clock {
                hour: hour;
                minute: minute;
                second: second;
            }
        }
        Tab {
            title: "Buttons";

            Buttons {
                number_per_row: root.number_per_row;
                widgets: root.widgets;
                screen_reset => {
                    root.screen_reset();
                }
                clicked_widget(i) => {
                    root.clicked_widget(i);
                }
            }
        }
        Tab {
            title: "Tags";

            Tags {
                tags: root.tags;
                screen_reset => {
                    root.screen_reset();
                }
            }
        }
        Tab {
            title: "Settings";

            VerticalLayout {
                Text {
                    text: "Settings";
                    color: white;
                    horizontal-alignment: center;
                    font-size: 20px;
                }
            }
        }
    }


    if display_message : Rectangle {
        x: 0px;
        y: 0px;
        width: parent.width;
        height: parent.height;
        background: white;
        opacity: 0.9;

        VerticalLayout {
            Text {
                text: msg_title;
                color: black;
                horizontal-alignment: center;
                font-size: 20px;
            }
            Text {
                text: msg_body;
                color: black;
                horizontal-alignment: center;
                font-size: 20px;
            }
        }
    }

    if screen_off : Rectangle {
        x: 0px;
        y: 0px;
        width: parent.width;
        height: parent.height;
        background: black;
        opacity: 0.9;
    }

    if screen_off || display_message : TouchArea {
        clicked => {
            screen_reset();
        }
    }
}
