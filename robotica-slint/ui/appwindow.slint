import { Button, VerticalBox } from "std-widgets.slint";

struct Icon := {
    on: image,
    off: image,
    auto_off: image,
    error: image,
}

struct AllIcons := {
    fan: Icon,
    light: Icon,
    night: Icon,
    schedule: Icon,
    select: Icon,
    speaker: Icon,
    trumpet: Icon,
    tv: Icon,
}

struct WidgetData := {
    is_button: bool,
    is_title: bool,
    title: string,
    state: string,
    image: image,
    color: color,
    text_color: color,
}

RoboticaButton := Rectangle {
    callback clicked;
    property<image> icon;
    property<string> title;
    property<string> state;
    property<color> text_color;

    height: 80px;
    width: 80px;
    border-radius: 5px;
    animate background { duration: 200ms; }

    Image {
        source: icon;
        x: parent.width/2 - width/2;
        y: 4px;
        width: 52px;
        height: 52px;
    }

    Text {
        text: title;
        x: 0px;
        y: parent.height - 20px - 4px;
        width: parent.width;
        // height: parent.height;
        color: text_color;
        font-size: 10px;
        horizontal-alignment: center;
    }

    Text {
        text: state;
        x: 0px;
        y: parent.height - 10px - 4px;
        width: parent.width;
        // height: parent.height;
        color: text_color;
        font-size: 10px;
        horizontal-alignment: center;
    }

    TouchArea {
        clicked => {
            // Delegate to the user of this element
            root.clicked();
        }
    }
}

Title := Rectangle {
    callback clicked;
    property<string> title;
    property<color> text_color;

    height: 80px;
    width: 80px;
    border-radius: 5px;
    animate background { duration: 200ms; }

    Text {
        text: title;
        x: 0px;
        y: parent.height/2 - 10px/2;
        width: parent.width;
        // height: parent.height;
        color: text_color;
        font-size: 10px;
        horizontal-alignment: center;
    }
}

Widget := VerticalBox {
    property<WidgetData> widget;
    callback clicked;

    if widget.is_button : RoboticaButton {
        icon: widget.image;
        background: widget.color;
        text_color: widget.text_color;
        title: widget.title;
        state: widget.state;
        clicked => {
            root.clicked();
        }
    }

    if widget.is_title : Title {
        background: widget.color;
        text_color: widget.text_color;
        title: widget.title;
    }
}


export component AppWindow inherits Window {
    in-out property<int> number_per_row;
    callback clicked_widget(int);

    out property<AllIcons> all_icons: {
        fan: { on: @image-url("images/fan_on.svg"), off: @image-url("images/fan_off.svg"), auto_off: @image-url("images/fan_auto.svg"), error: @image-url("images/fan_error.svg") },
        light: { on: @image-url("images/light_on.svg"), off: @image-url("images/light_off.svg"), auto_off: @image-url("images/light_auto.svg"), error: @image-url("images/light_error.svg") },
        night: { on: @image-url("images/night_on.svg"), off: @image-url("images/night_off.svg"), auto_off: @image-url("images/night_auto.svg"), error: @image-url("images/night_error.svg") },
        schedule: { on: @image-url("images/schedule_on.svg"), off: @image-url("images/schedule_off.svg"), auto_off: @image-url("images/schedule_auto.svg"), error: @image-url("images/schedule_error.svg") },
        select: { on: @image-url("images/select_on.svg"), off: @image-url("images/select_off.svg"), auto_off: @image-url("images/select_auto.svg"), error: @image-url("images/select_error.svg") },
        speaker: { on: @image-url("images/speaker_on.svg"), off: @image-url("images/speaker_off.svg"), auto_off: @image-url("images/speaker_auto.svg"), error: @image-url("images/speaker_error.svg") },
        trumpet: { on: @image-url("images/trumpet_on.svg"), off: @image-url("images/trumpet_off.svg"), auto_off: @image-url("images/trumpet_auto.svg"), error: @image-url("images/trumpet_error.svg") },
        tv: { on: @image-url("images/tv_on.svg"), off: @image-url("images/tv_off.svg"), auto_off: @image-url("images/tv_auto.svg"), error: @image-url("images/tv_error.svg") },
    };

    in property <[WidgetData]> widgets: [];

    for widget[i] in widgets : Widget {
        widget: widget;
        x: mod(i, number_per_row) * 100px + 10px;
        y: floor(i / number_per_row) * 100px + 10px;
        clicked => {
            root.clicked_widget(i);
        }
    }
}
