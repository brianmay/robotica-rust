import { ScrollView, TabWidget, VerticalBox , HorizontalBox, ComboBox} from "std-widgets.slint";

struct Icon {
    on: image,
    off: image,
    auto_off: image,
    error: image,
}

struct AllIcons {
    fan: Icon,
    light: Icon,
    night: Icon,
    schedule: Icon,
    select: Icon,
    speaker: Icon,
    trumpet: Icon,
    tv: Icon,
}

struct ButtonData {
    title: string,
    state: string,
    image: image,
    color: color,
    text_color: color,
    id: int,
}

struct ButtonRowData {
    title: string,
    buttons: [ButtonData],
}

struct TagsForDay {
    date: string,
    tags: [string],
}

struct SequenceData {
    time: string,
    title: string,
    important: bool,
    status: int,
    tasks: [string],
}

struct ScheduleData {
    date: string,
    sequences: [SequenceData],
}

component RoboticaButton inherits Rectangle {
    callback clicked;
    in property<ButtonData> data;

    height: 80px;
    width: 80px;
    border-radius: 5px;
    background: data.color;
    animate background { duration: 200ms; }

    Image {
        source: data.image;
        x: parent.width/2 - self.width/2;
        y: 4px;
        width: 52px;
        height: 52px;
    }

    Text {
        text: data.title;
        x: 0px;
        y: parent.height - 20px - 4px;
        width: parent.width;
        // height: parent.height;
        color: data.text_color;
        font-size: 10px;
        horizontal-alignment: center;
    }

    Text {
        text: data.state;
        x: 0px;
        y: parent.height - 10px - 4px;
        width: parent.width;
        // height: parent.height;
        color: data.text_color;
        font-size: 10px;
        horizontal-alignment: center;
    }

    TouchArea {
        clicked => {
            // Delegate to the user of this element
            root.clicked();
        }
    }
}

component Title inherits Rectangle {
    callback clicked;
    in property<string> title;

    height: 80px;
    width: 80px;
    border-radius: 5px;
    background: #202020;
    animate background { duration: 200ms; }

    Text {
        text: title;
        x: 0px;
        y: parent.height/2 - 10px/2;
        width: parent.width;
        // height: parent.height;
        color: white;
        font-size: 10px;
        horizontal-alignment: center;
    }
}

component Buttons inherits ScrollView {
    in property <[ButtonRowData]> rows: [];
    callback screen_reset;
    callback clicked_widget(int);
    in property<int> number_per_row;

    viewport-width: (80px + 10px) * number_per_row + 10px;
    viewport-height: (80px + 10px) * rows.length + 10px;

    VerticalLayout {
        padding: 10px;
        spacing: 10px;

        for row[i] in rows : HorizontalLayout {
            spacing: 10px;

            Title {
                title: row.title;
                clicked => {
                    screen_reset();
                }
            }
            for column[i] in row.buttons : RoboticaButton{
                data: column;
                clicked => {
                    screen_reset();
                    root.clicked_widget(column.id);
                }
            }
            for x in number_per_row - row.buttons.length : Rectangle {
                width: 80px;
                height: 80px;
                background: #202020;
            }
        }
    }
}

component InlineTags inherits Rectangle {
    in property <[string]> tags;
    for tag[i] in tags : Rectangle {
        Text {
            text: tag;
            color: white;
            font-size: 10px;
            horizontal-alignment: center;
            vertical-alignment: center;
            x: 10px;
            y: 10px;
            width: parent.width - 20px;
            height: parent.height - 20px;
        }
        background: green;
        width: 200px;
        height: 40px;
        border-radius: 5px;
        x: 0px + mod(i,3) * 210px;
        y: 0px + floor(i/3) * 50px;
    }
    width: 0px + 3 * 210px - 10px;
    height: 0px + ceil(tags.length/3) * 50px - 10px;
}

component Tags inherits ScrollView {
    in property <[TagsForDay]> tags;
    callback screen_reset;

    VerticalLayout {
        alignment: start;

        for tags_for_day[i] in tags : VerticalLayout {
            padding: 10px;
            spacing: 10px;

            Rectangle {
                Text {
                    text: tags_for_day.date;
                    color: white;
                    font-size: 20px;
                    width: parent.width - 20px;
                    horizontal-alignment: left;
                    // y: 20px;
                }
                height: 20px + 20px;
            }

            InlineTags {
                tags: tags_for_day.tags;
                // x: 0;
            }
        }
    }
}


component Schedule inherits ScrollView {
    in property <[ScheduleData]> schedule_list;
    callback screen_reset;

    // viewport-width: 200px;
    // viewport-height: (90px + 10px) * schedule.length + 10px;

    VerticalLayout {
        padding: 10px;
        spacing: 10px;

        for schedule[i] in schedule_list : VerticalLayout {
            padding: 0px;
            spacing: 10px;

            Rectangle {
                Text {
                    text: schedule.date;
                    color: white;
                    font-size: 20px;
                    width: parent.width;
                    horizontal-alignment: left;
                    y: 20px;
                }
                height: 20px + 20px;
            }

            for entry[i] in schedule.sequences : Rectangle {
                property <bool> open;
                property <[string]> tasks;
                open: false;
                tasks: open ? entry.tasks :  [];
                height: open ? 30px + 20px * entry.tasks.length : 30px;
                property <color> pending_color: entry.important ? green : grey;
                // 0 = pending (pending)
                // 1 = in progress (blue)
                // 2 = completed (black)
                // 3 = cancelled (red)
                background: entry.status == 0 ? pending_color : entry.status == 1 ? blue : entry.status == 2 ? black : red;

                Text {
                    x: 10px;
                    y: 10px;
                    width: parent.width;
                    font-size: 10px;
                    text: entry.time + " " + entry.title;
                    color: white;
                }
                for task[i] in tasks : Text{
                    x: 20px;
                    y: 30px + 20px * i;
                    width: parent.width - 40px;
                    font-size: 10px;
                    text: task;
                    color: white;
                }

                TouchArea {
                    clicked => {
                        screen_reset();
                        parent.open = !parent.open;
                    }
                }
            }
        }
    }
}


component Clock inherits VerticalLayout {
    in property<int> hour;
    in property<int> minute;
    in property<int> second;

    Text {
        text: "Clock";
        color: white;
        horizontal-alignment: center;
        font-size: 20px;
    }
    Rectangle {
        background: black;


        // hour marks
        for hour in [1,2,3,4,5,6,7,8,9,10,11,12] : Path {
            viewbox-height: 100;
            viewbox-width: 100;
            width: parent.width;
            height: parent.height;
            stroke: white;
            stroke-width: 5px;

            MoveTo {
                x: 50 + sin(360deg*hour/12)*49;
                y: 50 - cos(360deg*hour/12)*49;
            }
            LineTo {
                x: 50 + sin(360deg*hour/12)*50;
                y: 50 - cos(360deg*hour/12)*50;
            }
        }

        // minute marks
        for minute in [
                        1,2,3,4,
                        6,7,8,9,
                        11,12,13,14,
                        16,17,18,19,
                        21,22,23,24,
                        26,27,28,29,
                        31,32,33,34,
                        36,37,38,39,
                        41,42,43,44,
                        46,47,48,49,
                        51,52,53,54,
                        56,57,58,59
                    ] : Path {
                viewbox-height: 100;
                viewbox-width: 100;
                width: parent.width;
                height: parent.height;
                stroke: white;
                stroke-width: 1px;

                MoveTo {
                    x: 50 + sin(360deg*minute/60)*49;
                    y: 50 - cos(360deg*minute/60)*49;
                }
                LineTo {
                    x: 50 + sin(360deg*minute/60)*50;
                    y: 50 - cos(360deg*minute/60)*50;
                }
            }


        // clock face
        Path {
            viewbox-height: 100;
            viewbox-width: 100;
            width: parent.width;
            height: parent.height;
            stroke: white;
            stroke-width: 5px;

            MoveTo {
                x: 50;
                y: 0;
            }
            ArcTo {
                x: 50;
                y: 100;
                radius-x: 50;
                radius-y: 50;
                x-rotation:0;
                large-arc: true;
                sweep: true;
            }
            ArcTo {
                x: 50;
                y: 0;
                radius-x: 50;
                radius-y: 50;
                x-rotation:0;
                large-arc: true;
                sweep: true;
            }
        }

        // hour hand
        Path {
            viewbox-height: 100;
            viewbox-width: 100;
            width: parent.width;
            height: parent.height;
            stroke: red;
            stroke-width: 10px;

            MoveTo {
                x: 50;
                y: 50;
            }
            LineTo {
                x: 50 + sin(360deg*hour/12)*30;
                y: 50 - cos(360deg*hour/12)*30;
            }

        }

        // minute hand
        Path {
            viewbox-height: 100;
            viewbox-width: 100;
            width: parent.width;
            height: parent.height;
            stroke: green;
            stroke-width: 5px;

            MoveTo {
                x: 50;
                y: 50;
            }
            LineTo {
                x: 50 + sin(360deg*minute/60)*40;
                y: 50 - cos(360deg*minute/60)*40;
            }
        }

        // second hand
        Path {
            viewbox-height: 100;
            viewbox-width: 100;
            width: parent.width;
            height: parent.height;
            stroke: blue;
            stroke-width: 1px;

            MoveTo {
                x: 50;
                y: 50;
            }
            LineTo {
                x: 50 + sin(360deg*second/60)*50;
                y: 50 - cos(360deg*second/60)*50;
            }
        }
    }
}

export component AppWindow inherits Window {
    in-out property<int> number_per_row;
    in property<bool> screen_on;
    in property<string> msg_body;
    in property<string> msg_title;
    in property<bool> display_message;
    in property<int> hour;
    in property<int> minute;
    in property<int> second;
    in property<[ScheduleData]> schedule_list;
    in property<[string]> rooms;
    in property<string> selected_room;

    callback clicked_widget(int);
    callback screen_reset;
    callback room_changed(string);
    background: black;

    out property<AllIcons> all_icons: {
        fan: { on: @image-url("images/fan_on.svg"), off: @image-url("images/fan_off.svg"), auto_off: @image-url("images/fan_auto.svg"), error: @image-url("images/fan_error.svg") },
        light: { on: @image-url("images/light_on.svg"), off: @image-url("images/light_off.svg"), auto_off: @image-url("images/light_auto.svg"), error: @image-url("images/light_error.svg") },
        night: { on: @image-url("images/night_on.svg"), off: @image-url("images/night_off.svg"), auto_off: @image-url("images/night_auto.svg"), error: @image-url("images/night_error.svg") },
        schedule: { on: @image-url("images/schedule_on.svg"), off: @image-url("images/schedule_off.svg"), auto_off: @image-url("images/schedule_auto.svg"), error: @image-url("images/schedule_error.svg") },
        select: { on: @image-url("images/select_on.svg"), off: @image-url("images/select_off.svg"), auto_off: @image-url("images/select_auto.svg"), error: @image-url("images/select_error.svg") },
        speaker: { on: @image-url("images/speaker_on.svg"), off: @image-url("images/speaker_off.svg"), auto_off: @image-url("images/speaker_auto.svg"), error: @image-url("images/speaker_error.svg") },
        trumpet: { on: @image-url("images/trumpet_on.svg"), off: @image-url("images/trumpet_off.svg"), auto_off: @image-url("images/trumpet_auto.svg"), error: @image-url("images/trumpet_error.svg") },
        tv: { on: @image-url("images/tv_on.svg"), off: @image-url("images/tv_off.svg"), auto_off: @image-url("images/tv_auto.svg"), error: @image-url("images/tv_error.svg") },
    };

    in property <[ButtonRowData]> buttons: [];
    in property <[TagsForDay]> tags: [];

    TouchArea {
        clicked => {
            screen_reset();
        }
    }

    ComboBox {
        x: 10px;
        y: 10px;
        width: 200px;
        height: 40px;
        model: root.rooms;
        current-value: root.selected_room;
        selected(selected) => {
            root.screen_reset();
            root.room_changed(selected);
        }
    }

    TabWidget {
        x: 0px;
        y: 80px;
        width: parent.width;
        height: parent.height - 80px;

        Tab {
            title: "Clock";

            Clock {
                hour: hour;
                minute: minute;
                second: second;
            }
        }
        Tab {
            title: "Buttons";

            Buttons {
                rows: buttons;
                number_per_row: number_per_row;
                screen_reset => {
                    root.screen_reset();
                }
                clicked_widget(i) => {
                    root.clicked_widget(i);
                }
            }
        }
        Tab {
            title: "Tags";

            Tags {
                tags: root.tags;
                screen_reset => {
                    root.screen_reset();
                }
            }
        }
        Tab {
            title: "Schedule";

            Schedule {
                schedule_list: root.schedule_list;
                screen_reset => {
                    root.screen_reset();
                }
            }
        }
    }


    if display_message : Rectangle {
        x: 0px;
        y: 0px;
        width: parent.width;
        height: parent.height;
        background: black;
        opacity: 0.9;

        VerticalLayout {
            Text {
                text: msg_title;
                color: white;
                horizontal-alignment: center;
                font-size: 30px;
                wrap: word-wrap;
            }
            Text {
                text: msg_body;
                color: white;
                horizontal-alignment: center;
                font-size: 40px;
                wrap: word-wrap;
            }
        }
    }

    if !screen_on : Rectangle {
        x: 0px;
        y: 0px;
        width: parent.width;
        height: parent.height;
        background: black;
        opacity: 0.9;
    }

    if !screen_on || display_message : TouchArea {
        clicked => {
            screen_reset();
        }
    }
}
