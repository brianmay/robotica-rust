use std::str::FromStr;
use std::collections::HashSet;
use crate::conditions::ast::{Expr, Opcode, Condition, ConditionOpcode, Boolean, Fields, ConditionError, Reference, FieldRef, unquote};
use lalrpop_util::ParseError;

grammar<T>(fields: &Fields<T>);

extern {
    type Error = ConditionError;
}


pub Boolean: Boolean<T> = {
    "not" <Condition> => Boolean::<T>::Not(<>),
    <left:Boolean> "and" <right:Condition> => Boolean::<T>::And(Box::new(left), right),
    <left:Boolean> "or" <right:Condition> => Boolean::<T>::Or(Box::new(left), right),
    <Condition> => Boolean::<T>::Condition(<>),
}

Condition: Condition<T> = {
    "(" <Boolean> ")" => Condition::<T>::Boolean(Box::new(<>)),
    <left:Expr> <op:ConditionOpcode> <right:Expr> =>? {
        let f = || -> Result<Condition<T>, ConditionError> {
            Ok(Condition::<T>::Op(left, op, right))
        };
        let result = f();
        result.map_err(|e| e.into())
    },
    <left:ConstantString> "in" <right:SetVariable> => Condition::<T>::In(unquote(&left), right),
    <left:ConstantString> "not in" <right:SetVariable> => Condition::<T>::NotIn(unquote(&left), right),
};

ConditionOpcode: ConditionOpcode = {
    "==" => ConditionOpcode::Eq,
    "!=" => ConditionOpcode::NotEq,
    "<" => ConditionOpcode::Lt,
    "<=" => ConditionOpcode::Lte,
    ">" => ConditionOpcode::Gt,
    ">=" => ConditionOpcode::Gte,
};

Expr: Box<Expr<T>> = {
    Expr ExprOp Factor => Box::new(Expr::<T>::Op(<>)),
    Factor,
};

ExprOp: Opcode = {
    "+" => Opcode::Add,
    "-" => Opcode::Sub,
};

Factor: Box<Expr<T>> = {
    Factor FactorOp Term => Box::new(Expr::<T>::Op(<>)),
    Term,
};

FactorOp: Opcode = {
    "*" => Opcode::Mul,
    "/" => Opcode::Div,
    "%" => Opcode::Remainder,
};

Term: Box<Expr<T>> = {
    Integer => Box::new(Expr::<T>::Integer(<>)),
    Float => Box::new(Expr::<T>::Float(<>)),
    <ConstantString> => Box::new(Expr::<T>::String(<>)),
    <Variable> => Box::new(Expr::<T>::Variable(<>)),
    "(" <Expr> ")"
};

Integer: i32 = {
    r"[0-9]+" => i32::from_str(<>).unwrap()
};

Float: f32 = {
    r"[0-9]+\.[0-9]+" => f32::from_str(<>).unwrap()
};

ConstantString: String = {
    <l:r"'[a-zA-Z_][a-zA-Z0-9_:]*'"> => unquote(l),
    <l:r#""[a-zA-Z_][a-zA-Z0-9_:]*""#> => unquote(l),
};

Variable: Reference<T> = {
    <r:r"[a-zA-Z_][a-zA-Z0-9_]*"> =>?
        match fields.scalars.contains(r) {
            true => Ok(Reference::new_scalar(r)),
            false => Err(ParseError::User{error: ConditionError::FieldNotFound(r.to_string())}),
        },
};

SetVariable: FieldRef<T, HashSet<String>> = {
    <r:r"[a-zA-Z_][a-zA-Z0-9_]*"> =>?
        match fields.hash_sets.contains(r) {
            true => Ok(FieldRef::new(r)),
            false => Err(ParseError::User{error: ConditionError::FieldNotFound(r.to_string())}),
        },
};
